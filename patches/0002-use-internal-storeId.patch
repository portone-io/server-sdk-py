From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kiwiyou <kiwiyou@portone.io>
Date: Mon, 12 Aug 2024 14:29:16 +0900
Subject: [PATCH] use internal storeId


diff --git a/_async_api/_apply_escrow_logistics.py b/_async_api/_apply_escrow_logistics.py
index 75a4a8c..ed00971 100644
--- a/_async_api/_apply_escrow_logistics.py
+++ b/_async_api/_apply_escrow_logistics.py
@@ -37,7 +37,6 @@ class ApplyEscrowLogistics(ApiClient):
     async def apply_escrow_logistics(
         self,
         payment_id: str,
-        store_id: Optional[str],
         sender: Optional[PaymentEscrowSenderInput],
         receiver: Optional[PaymentEscrowReceiverInput],
         logistics: PaymentLogistics,
@@ -50,8 +49,6 @@ class ApplyEscrowLogistics(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             sender (Optional[PaymentEscrowSenderInput]): 에스크로 발송자 정보.
             receiver (Optional[PaymentEscrowReceiverInput]): 에스크로 수취인 정보.
             logistics (PaymentLogistics): 에스크로 물류 정보.
@@ -75,7 +72,7 @@ class ApplyEscrowLogistics(ApiClient):
         )
         query_ = ApplyEscrowLogisticsQuery()
         body_ = RegisterEscrowLogisticsBody(
-            store_id=store_id,
+            store_id=self.store_id,
             sender=sender,
             receiver=receiver,
             logistics=logistics,
diff --git a/_async_api/_cancel_cash_receipt_by_payment_id.py b/_async_api/_cancel_cash_receipt_by_payment_id.py
index bb8d53d..faca65e 100644
--- a/_async_api/_cancel_cash_receipt_by_payment_id.py
+++ b/_async_api/_cancel_cash_receipt_by_payment_id.py
@@ -37,7 +37,6 @@ class CancelCashReceiptByPaymentId(ApiClient):
     async def cancel_cash_receipt_by_payment_id(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> CancelCashReceiptResponse:
         """현금 영수증 취소
         
@@ -45,8 +44,6 @@ class CancelCashReceiptByPaymentId(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -63,7 +60,7 @@ class CancelCashReceiptByPaymentId(ApiClient):
             payment_id=payment_id,
         )
         query_ = CancelCashReceiptByPaymentIdQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_cancel_payment.py b/_async_api/_cancel_payment.py
index 856b3dd..09a3d32 100644
--- a/_async_api/_cancel_payment.py
+++ b/_async_api/_cancel_payment.py
@@ -43,7 +43,6 @@ class CancelPayment(ApiClient):
     async def cancel_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
         amount: Optional[int],
         tax_free_amount: Optional[int],
         vat_amount: Optional[int],
@@ -58,8 +57,6 @@ class CancelPayment(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             amount (Optional[int]): 취소 총 금액.
                 값을 입력하지 않으면 전액 취소됩니다.
             tax_free_amount (Optional[int]): 취소 금액 중 면세 금액.
@@ -97,7 +94,7 @@ class CancelPayment(ApiClient):
         )
         query_ = CancelPaymentQuery()
         body_ = CancelPaymentBody(
-            store_id=store_id,
+            store_id=self.store_id,
             amount=amount,
             tax_free_amount=tax_free_amount,
             vat_amount=vat_amount,
diff --git a/_async_api/_close_virtual_account.py b/_async_api/_close_virtual_account.py
index e8474bc..60674bd 100644
--- a/_async_api/_close_virtual_account.py
+++ b/_async_api/_close_virtual_account.py
@@ -37,7 +37,6 @@ class CloseVirtualAccount(ApiClient):
     async def close_virtual_account(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> CloseVirtualAccountResponse:
         """가상계좌 말소
         
@@ -45,8 +44,6 @@ class CloseVirtualAccount(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -63,7 +60,7 @@ class CloseVirtualAccount(ApiClient):
             payment_id=payment_id,
         )
         query_ = CloseVirtualAccountQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_confirm_escrow.py b/_async_api/_confirm_escrow.py
index 55aaa26..77849ef 100644
--- a/_async_api/_confirm_escrow.py
+++ b/_async_api/_confirm_escrow.py
@@ -33,7 +33,6 @@ class ConfirmEscrow(ApiClient):
     async def confirm_escrow(
         self,
         payment_id: str,
-        store_id: Optional[str],
         from_store: Optional[bool],
     ) -> ConfirmEscrowResponse:
         """에스크로 구매 확정
@@ -42,8 +41,6 @@ class ConfirmEscrow(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             from_store (Optional[bool]): 확인 주체가 상점인지 여부.
                 구매확정요청 주체가 고객사 관리자인지 구매자인지 구분하기 위한 필드입니다.
                 네이버페이 전용 파라미터이며, 구분이 모호한 경우 고객사 관리자(true)로 입력합니다.
@@ -64,7 +61,7 @@ class ConfirmEscrow(ApiClient):
         )
         query_ = ConfirmEscrowQuery()
         body_ = ConfirmEscrowBody(
-            store_id=store_id,
+            store_id=self.store_id,
             from_store=from_store,
         )
         response_ = await self.send(
diff --git a/_async_api/_confirm_identity_verification.py b/_async_api/_confirm_identity_verification.py
index 6b6abe6..69f51d0 100644
--- a/_async_api/_confirm_identity_verification.py
+++ b/_async_api/_confirm_identity_verification.py
@@ -34,7 +34,6 @@ class ConfirmIdentityVerification(ApiClient):
     async def confirm_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
         otp: Optional[str],
     ) -> ConfirmIdentityVerificationResponse:
         """본인인증 확인
@@ -43,8 +42,6 @@ class ConfirmIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             otp (Optional[str]): OTP (One-Time Password).
                 SMS 방식에서만 사용됩니다.
         
@@ -65,7 +62,7 @@ class ConfirmIdentityVerification(ApiClient):
         )
         query_ = ConfirmIdentityVerificationQuery()
         body_ = ConfirmIdentityVerificationBody(
-            store_id=store_id,
+            store_id=self.store_id,
             otp=otp,
         )
         response_ = await self.send(
diff --git a/_async_api/_delete_billing_key.py b/_async_api/_delete_billing_key.py
index c255e12..2297928 100644
--- a/_async_api/_delete_billing_key.py
+++ b/_async_api/_delete_billing_key.py
@@ -40,7 +40,6 @@ class DeleteBillingKey(ApiClient):
     async def delete_billing_key(
         self,
         billing_key: str,
-        store_id: Optional[str],
     ) -> DeleteBillingKeyResponse:
         """빌링키 삭제
         
@@ -48,8 +47,6 @@ class DeleteBillingKey(ApiClient):
         
         Args:
             billing_key (str): 삭제할 빌링키.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -69,7 +66,7 @@ class DeleteBillingKey(ApiClient):
             billing_key=billing_key,
         )
         query_ = DeleteBillingKeyQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_get_all_payments_by_cursor.py b/_async_api/_get_all_payments_by_cursor.py
index 61380d6..19bd728 100644
--- a/_async_api/_get_all_payments_by_cursor.py
+++ b/_async_api/_get_all_payments_by_cursor.py
@@ -28,7 +28,6 @@ class GetAllPaymentsByCursorRequest(ApiRequest[GetAllPaymentsByCursorResponse, G
 class GetAllPaymentsByCursor(ApiClient):
     async def get_all_payments_by_cursor(
         self,
-        store_id: Optional[str],
         from_: Optional[str],
         until: Optional[str],
         cursor: Optional[str],
@@ -39,8 +38,6 @@ class GetAllPaymentsByCursor(ApiClient):
         기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             from_ (Optional[str]): 결제 건 생성시점 범위 조건의 시작.
                 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
             until (Optional[str]): 결제 건 생성시점 범위 조건의 끝.
@@ -61,7 +58,7 @@ class GetAllPaymentsByCursor(ApiClient):
         param_ = GetAllPaymentsByCursorParam()
         query_ = GetAllPaymentsByCursorQuery()
         body_ = GetAllPaymentsByCursorBody(
-            store_id=store_id,
+            store_id=self.store_id,
             from_=from_,
             until=until,
             cursor=cursor,
diff --git a/_async_api/_get_billing_key_info.py b/_async_api/_get_billing_key_info.py
index 48ed5fd..df1b8b5 100644
--- a/_async_api/_get_billing_key_info.py
+++ b/_async_api/_get_billing_key_info.py
@@ -35,7 +35,6 @@ class GetBillingKeyInfo(ApiClient):
     async def get_billing_key_info(
         self,
         billing_key: str,
-        store_id: Optional[str],
     ) -> Optional[BillingKeyInfo]:
         """빌링키 단건 조회
         
@@ -43,8 +42,6 @@ class GetBillingKeyInfo(ApiClient):
         
         Args:
             billing_key (str): 조회할 빌링키.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 빌링키 정보 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetBillingKeyInfo(ApiClient):
             billing_key=billing_key,
         )
         query_ = GetBillingKeyInfoQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_get_cash_receipt_by_payment_id.py b/_async_api/_get_cash_receipt_by_payment_id.py
index 5734140..a02a652 100644
--- a/_async_api/_get_cash_receipt_by_payment_id.py
+++ b/_async_api/_get_cash_receipt_by_payment_id.py
@@ -35,7 +35,6 @@ class GetCashReceiptByPaymentId(ApiClient):
     async def get_cash_receipt_by_payment_id(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> Optional[CashReceipt]:
         """현금 영수증 단건 조회
         
@@ -43,8 +42,6 @@ class GetCashReceiptByPaymentId(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 현금 영수증 객체 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetCashReceiptByPaymentId(ApiClient):
             payment_id=payment_id,
         )
         query_ = GetCashReceiptByPaymentIdQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_get_identity_verification.py b/_async_api/_get_identity_verification.py
index 13f345b..1a44684 100644
--- a/_async_api/_get_identity_verification.py
+++ b/_async_api/_get_identity_verification.py
@@ -35,7 +35,6 @@ class GetIdentityVerification(ApiClient):
     async def get_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
     ) -> Optional[IdentityVerification]:
         """본인인증 단건 조회
         
@@ -43,8 +42,6 @@ class GetIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 조회할 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 본인 인증 객체 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetIdentityVerification(ApiClient):
             identity_verification_id=identity_verification_id,
         )
         query_ = GetIdentityVerificationQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_get_payment.py b/_async_api/_get_payment.py
index 0c9f3c9..bcd4d58 100644
--- a/_async_api/_get_payment.py
+++ b/_async_api/_get_payment.py
@@ -31,7 +31,6 @@ class GetPayment(ApiClient):
     async def get_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> Optional[Payment]:
         """결제 단건 조회
         
@@ -39,7 +38,6 @@ class GetPayment(ApiClient):
         
         Args:
             payment_id (str): 조회할 결제 아이디.
-            store_id (Optional[str]): 상점 아이디.
         
         Returns:
             성공 응답으로 결제 건 객체 또는 `None`을 반환합니다.
@@ -53,7 +51,7 @@ class GetPayment(ApiClient):
             payment_id=payment_id,
         )
         query_ = GetPaymentQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_get_payment_schedule.py b/_async_api/_get_payment_schedule.py
index 66e1de6..e9cd58d 100644
--- a/_async_api/_get_payment_schedule.py
+++ b/_async_api/_get_payment_schedule.py
@@ -35,7 +35,6 @@ class GetPaymentSchedule(ApiClient):
     async def get_payment_schedule(
         self,
         payment_schedule_id: str,
-        store_id: Optional[str],
     ) -> Optional[PaymentSchedule]:
         """결제 예약 단건 조회
         
@@ -43,8 +42,6 @@ class GetPaymentSchedule(ApiClient):
         
         Args:
             payment_schedule_id (str): 조회할 결제 예약 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 결제 예약 건 객체 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetPaymentSchedule(ApiClient):
             payment_schedule_id=payment_schedule_id,
         )
         query_ = GetPaymentScheduleQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_issue_billing_key.py b/_async_api/_issue_billing_key.py
index f638582..d34963e 100644
--- a/_async_api/_issue_billing_key.py
+++ b/_async_api/_issue_billing_key.py
@@ -33,7 +33,6 @@ class IssueBillingKeyRequest(ApiRequest[IssueBillingKeyResponse, IssueBillingKey
 class IssueBillingKey(ApiClient):
     async def issue_billing_key(
         self,
-        store_id: Optional[str],
         method: InstantBillingKeyPaymentMethodInput,
         channel_key: Optional[str],
         channel_group_id: Optional[str],
@@ -47,8 +46,6 @@ class IssueBillingKey(ApiClient):
         빌링키 발급을 요청합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             method (InstantBillingKeyPaymentMethodInput): 빌링키 결제 수단 정보.
             channel_key (Optional[str]): 채널 키.
                 채널 키 또는 채널 그룹 ID 필수
@@ -76,7 +73,7 @@ class IssueBillingKey(ApiClient):
         param_ = IssueBillingKeyParam()
         query_ = IssueBillingKeyQuery()
         body_ = IssueBillingKeyBody(
-            store_id=store_id,
+            store_id=self.store_id,
             method=method,
             channel_key=channel_key,
             channel_group_id=channel_group_id,
diff --git a/_async_api/_issue_cash_receipt.py b/_async_api/_issue_cash_receipt.py
index 8a88412..7426e23 100644
--- a/_async_api/_issue_cash_receipt.py
+++ b/_async_api/_issue_cash_receipt.py
@@ -37,7 +37,6 @@ class IssueCashReceiptRequest(ApiRequest[IssueCashReceiptResponse, IssueCashRece
 class IssueCashReceipt(ApiClient):
     async def issue_cash_receipt(
         self,
-        store_id: Optional[str],
         payment_id: str,
         channel_key: str,
         type: CashReceiptType,
@@ -53,8 +52,6 @@ class IssueCashReceipt(ApiClient):
         현금 영수증 발급을 요청합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             payment_id (str): 결제 건 아이디.
                 외부 결제 건에 대한 수동 발급의 경우, 아이디를 직접 채번하여 입력합니다.
             channel_key (str): 채널 키.
@@ -80,7 +77,7 @@ class IssueCashReceipt(ApiClient):
         param_ = IssueCashReceiptParam()
         query_ = IssueCashReceiptQuery()
         body_ = IssueCashReceiptBody(
-            store_id=store_id,
+            store_id=self.store_id,
             payment_id=payment_id,
             channel_key=channel_key,
             type=type,
diff --git a/_async_api/_modify_escrow_logistics.py b/_async_api/_modify_escrow_logistics.py
index 3b27cad..fd80006 100644
--- a/_async_api/_modify_escrow_logistics.py
+++ b/_async_api/_modify_escrow_logistics.py
@@ -37,7 +37,6 @@ class ModifyEscrowLogistics(ApiClient):
     async def modify_escrow_logistics(
         self,
         payment_id: str,
-        store_id: Optional[str],
         sender: Optional[PaymentEscrowSenderInput],
         receiver: Optional[PaymentEscrowReceiverInput],
         logistics: PaymentLogistics,
@@ -50,8 +49,6 @@ class ModifyEscrowLogistics(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             sender (Optional[PaymentEscrowSenderInput]): 에스크로 발송자 정보.
             receiver (Optional[PaymentEscrowReceiverInput]): 에스크로 수취인 정보.
             logistics (PaymentLogistics): 에스크로 물류 정보.
@@ -75,7 +72,7 @@ class ModifyEscrowLogistics(ApiClient):
         )
         query_ = ModifyEscrowLogisticsQuery()
         body_ = ModifyEscrowLogisticsBody(
-            store_id=store_id,
+            store_id=self.store_id,
             sender=sender,
             receiver=receiver,
             logistics=logistics,
diff --git a/_async_api/_pay_instantly.py b/_async_api/_pay_instantly.py
index 01a6939..a057073 100644
--- a/_async_api/_pay_instantly.py
+++ b/_async_api/_pay_instantly.py
@@ -45,7 +45,6 @@ class PayInstantly(ApiClient):
     async def pay_instantly(
         self,
         payment_id: str,
-        store_id: Optional[str],
         channel_key: Optional[str],
         channel_group_id: Optional[str],
         method: InstantPaymentMethodInput,
@@ -70,8 +69,6 @@ class PayInstantly(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             channel_key (Optional[str]): 채널 키.
                 채널 키 또는 채널 그룹 ID 필수
             channel_group_id (Optional[str]): 채널 그룹 ID.
@@ -117,7 +114,7 @@ class PayInstantly(ApiClient):
         )
         query_ = PayInstantlyQuery()
         body_ = InstantPaymentInput(
-            store_id=store_id,
+            store_id=self.store_id,
             channel_key=channel_key,
             channel_group_id=channel_group_id,
             method=method,
diff --git a/_async_api/_pay_with_billing_key.py b/_async_api/_pay_with_billing_key.py
index 3394bbb..812c936 100644
--- a/_async_api/_pay_with_billing_key.py
+++ b/_async_api/_pay_with_billing_key.py
@@ -47,7 +47,6 @@ class PayWithBillingKey(ApiClient):
     async def pay_with_billing_key(
         self,
         payment_id: str,
-        store_id: Optional[str],
         billing_key: str,
         channel_key: Optional[str],
         order_name: str,
@@ -74,8 +73,6 @@ class PayWithBillingKey(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             billing_key (str): 빌링키 결제에 사용할 빌링키.
             channel_key (Optional[str]): 채널 키.
                 다수 채널에 대해 발급된 빌링키에 대해, 결제 채널을 특정하고 싶을 때 명시
@@ -122,7 +119,7 @@ class PayWithBillingKey(ApiClient):
         )
         query_ = PayWithBillingKeyQuery()
         body_ = BillingKeyPaymentInput(
-            store_id=store_id,
+            store_id=self.store_id,
             billing_key=billing_key,
             channel_key=channel_key,
             order_name=order_name,
diff --git a/_async_api/_pre_register_payment.py b/_async_api/_pre_register_payment.py
index e71a3f1..6232ce8 100644
--- a/_async_api/_pre_register_payment.py
+++ b/_async_api/_pre_register_payment.py
@@ -32,7 +32,6 @@ class PreRegisterPayment(ApiClient):
     async def pre_register_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
         total_amount: Optional[int],
         tax_free_amount: Optional[int],
         currency: Optional[Currency],
@@ -43,8 +42,6 @@ class PreRegisterPayment(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             total_amount (Optional[int]): 결제 총 금액.
             tax_free_amount (Optional[int]): 결제 면세 금액.
             currency (Optional[Currency]): 통화 단위.
@@ -60,7 +57,7 @@ class PreRegisterPayment(ApiClient):
         )
         query_ = PreRegisterPaymentQuery()
         body_ = PreRegisterPaymentBody(
-            store_id=store_id,
+            store_id=self.store_id,
             total_amount=total_amount,
             tax_free_amount=tax_free_amount,
             currency=currency,
diff --git a/_async_api/_register_store_receipt.py b/_async_api/_register_store_receipt.py
index bb4afde..e27be36 100644
--- a/_async_api/_register_store_receipt.py
+++ b/_async_api/_register_store_receipt.py
@@ -35,7 +35,6 @@ class RegisterStoreReceipt(ApiClient):
         self,
         payment_id: str,
         items: list[RegisterStoreReceiptBodyItem],
-        store_id: Optional[str],
     ) -> RegisterStoreReceiptResponse:
         """영수증 내 하위 상점 거래 등록
         
@@ -46,7 +45,6 @@ class RegisterStoreReceipt(ApiClient):
         Args:
             payment_id (str): 등록할 하위 상점 결제 건 아이디.
             items (list[RegisterStoreReceiptBodyItem]): 하위 상점 거래 목록.
-            store_id (Optional[str]): 상점 아이디.
         
         Returns:
             성공 응답
@@ -65,7 +63,7 @@ class RegisterStoreReceipt(ApiClient):
         query_ = RegisterStoreReceiptQuery()
         body_ = RegisterStoreReceiptBody(
             items=items,
-            store_id=store_id,
+            store_id=self.store_id,
         )
         response_ = await self.send(
             RegisterStoreReceiptRequest(param_, query_, body_),
diff --git a/_async_api/_resend_identity_verification.py b/_async_api/_resend_identity_verification.py
index 8df85e5..3a7f421 100644
--- a/_async_api/_resend_identity_verification.py
+++ b/_async_api/_resend_identity_verification.py
@@ -38,7 +38,6 @@ class ResendIdentityVerification(ApiClient):
     async def resend_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
     ) -> None:
         """SMS 본인인증 요청 재전송
         
@@ -46,8 +45,6 @@ class ResendIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Raises:
             _errors.ForbiddenError: 요청이 거절된 경우
@@ -62,7 +59,7 @@ class ResendIdentityVerification(ApiClient):
             identity_verification_id=identity_verification_id,
         )
         query_ = ResendIdentityVerificationQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = await self.send(
diff --git a/_async_api/_resend_webhook.py b/_async_api/_resend_webhook.py
index 9c1f637..e771016 100644
--- a/_async_api/_resend_webhook.py
+++ b/_async_api/_resend_webhook.py
@@ -33,7 +33,6 @@ class ResendWebhook(ApiClient):
     async def resend_webhook(
         self,
         payment_id: str,
-        store_id: Optional[str],
         webhook_id: Optional[str],
     ) -> PaymentWebhook:
         """웹훅 재발송
@@ -42,8 +41,6 @@ class ResendWebhook(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             webhook_id (Optional[str]): 웹훅 아이디.
                 입력하지 않으면 결제 건의 가장 최근 웹훅 아이디가 기본 적용됩니다
         
@@ -62,7 +59,7 @@ class ResendWebhook(ApiClient):
         )
         query_ = ResendWebhookQuery()
         body_ = ResendWebhookBody(
-            store_id=store_id,
+            store_id=self.store_id,
             webhook_id=webhook_id,
         )
         response_ = await self.send(
diff --git a/_async_api/_revoke_payment_schedules.py b/_async_api/_revoke_payment_schedules.py
index 7243cbf..8242896 100644
--- a/_async_api/_revoke_payment_schedules.py
+++ b/_async_api/_revoke_payment_schedules.py
@@ -33,7 +33,6 @@ class RevokePaymentSchedulesRequest(ApiRequest[RevokePaymentSchedulesResponse, R
 class RevokePaymentSchedules(ApiClient):
     async def revoke_payment_schedules(
         self,
-        store_id: Optional[str],
         billing_key: Optional[str],
         schedule_ids: Optional[list[str]],
     ) -> RevokePaymentSchedulesResponse:
@@ -42,8 +41,6 @@ class RevokePaymentSchedules(ApiClient):
         결제 예약 건을 취소합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             billing_key (Optional[str]): 빌링키.
             schedule_ids (Optional[list[str]]): 결제 예약 건 아이디 목록.
         
@@ -63,7 +60,7 @@ class RevokePaymentSchedules(ApiClient):
         param_ = RevokePaymentSchedulesParam()
         query_ = RevokePaymentSchedulesQuery()
         body_ = RevokePaymentSchedulesBody(
-            store_id=store_id,
+            store_id=self.store_id,
             billing_key=billing_key,
             schedule_ids=schedule_ids,
         )
diff --git a/_async_api/_send_identity_verification.py b/_async_api/_send_identity_verification.py
index 5a43239..05e277a 100644
--- a/_async_api/_send_identity_verification.py
+++ b/_async_api/_send_identity_verification.py
@@ -38,7 +38,6 @@ class SendIdentityVerification(ApiClient):
     async def send_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
         channel_key: str,
         customer: SendIdentityVerificationBodyCustomer,
         custom_data: Optional[str],
@@ -52,8 +51,6 @@ class SendIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             channel_key (str): 채널 키.
             customer (SendIdentityVerificationBodyCustomer): 고객 정보.
             custom_data (Optional[str]): 사용자 지정 데이터.
@@ -76,7 +73,7 @@ class SendIdentityVerification(ApiClient):
         )
         query_ = SendIdentityVerificationQuery()
         body_ = SendIdentityVerificationBody(
-            store_id=store_id,
+            store_id=self.store_id,
             channel_key=channel_key,
             customer=customer,
             custom_data=custom_data,
diff --git a/_sync_api/_apply_escrow_logistics.py b/_sync_api/_apply_escrow_logistics.py
index d3b5025..60d6dfa 100644
--- a/_sync_api/_apply_escrow_logistics.py
+++ b/_sync_api/_apply_escrow_logistics.py
@@ -37,7 +37,6 @@ class ApplyEscrowLogistics(ApiClient):
     def apply_escrow_logistics(
         self,
         payment_id: str,
-        store_id: Optional[str],
         sender: Optional[PaymentEscrowSenderInput],
         receiver: Optional[PaymentEscrowReceiverInput],
         logistics: PaymentLogistics,
@@ -50,8 +49,6 @@ class ApplyEscrowLogistics(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             sender (Optional[PaymentEscrowSenderInput]): 에스크로 발송자 정보.
             receiver (Optional[PaymentEscrowReceiverInput]): 에스크로 수취인 정보.
             logistics (PaymentLogistics): 에스크로 물류 정보.
@@ -75,7 +72,7 @@ class ApplyEscrowLogistics(ApiClient):
         )
         query_ = ApplyEscrowLogisticsQuery()
         body_ = RegisterEscrowLogisticsBody(
-            store_id=store_id,
+            store_id=self.store_id,
             sender=sender,
             receiver=receiver,
             logistics=logistics,
diff --git a/_sync_api/_cancel_cash_receipt_by_payment_id.py b/_sync_api/_cancel_cash_receipt_by_payment_id.py
index fb42669..23ffff7 100644
--- a/_sync_api/_cancel_cash_receipt_by_payment_id.py
+++ b/_sync_api/_cancel_cash_receipt_by_payment_id.py
@@ -37,7 +37,6 @@ class CancelCashReceiptByPaymentId(ApiClient):
     def cancel_cash_receipt_by_payment_id(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> CancelCashReceiptResponse:
         """현금 영수증 취소
         
@@ -45,8 +44,6 @@ class CancelCashReceiptByPaymentId(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -63,7 +60,7 @@ class CancelCashReceiptByPaymentId(ApiClient):
             payment_id=payment_id,
         )
         query_ = CancelCashReceiptByPaymentIdQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_cancel_payment.py b/_sync_api/_cancel_payment.py
index e80a2e8..0b54794 100644
--- a/_sync_api/_cancel_payment.py
+++ b/_sync_api/_cancel_payment.py
@@ -43,7 +43,6 @@ class CancelPayment(ApiClient):
     def cancel_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
         amount: Optional[int],
         tax_free_amount: Optional[int],
         vat_amount: Optional[int],
@@ -58,8 +57,6 @@ class CancelPayment(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             amount (Optional[int]): 취소 총 금액.
                 값을 입력하지 않으면 전액 취소됩니다.
             tax_free_amount (Optional[int]): 취소 금액 중 면세 금액.
@@ -97,7 +94,7 @@ class CancelPayment(ApiClient):
         )
         query_ = CancelPaymentQuery()
         body_ = CancelPaymentBody(
-            store_id=store_id,
+            store_id=self.store_id,
             amount=amount,
             tax_free_amount=tax_free_amount,
             vat_amount=vat_amount,
diff --git a/_sync_api/_close_virtual_account.py b/_sync_api/_close_virtual_account.py
index 6641c14..9223579 100644
--- a/_sync_api/_close_virtual_account.py
+++ b/_sync_api/_close_virtual_account.py
@@ -37,7 +37,6 @@ class CloseVirtualAccount(ApiClient):
     def close_virtual_account(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> CloseVirtualAccountResponse:
         """가상계좌 말소
         
@@ -45,8 +44,6 @@ class CloseVirtualAccount(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -63,7 +60,7 @@ class CloseVirtualAccount(ApiClient):
             payment_id=payment_id,
         )
         query_ = CloseVirtualAccountQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_confirm_escrow.py b/_sync_api/_confirm_escrow.py
index dc7f359..35e90dd 100644
--- a/_sync_api/_confirm_escrow.py
+++ b/_sync_api/_confirm_escrow.py
@@ -33,7 +33,6 @@ class ConfirmEscrow(ApiClient):
     def confirm_escrow(
         self,
         payment_id: str,
-        store_id: Optional[str],
         from_store: Optional[bool],
     ) -> ConfirmEscrowResponse:
         """에스크로 구매 확정
@@ -42,8 +41,6 @@ class ConfirmEscrow(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             from_store (Optional[bool]): 확인 주체가 상점인지 여부.
                 구매확정요청 주체가 고객사 관리자인지 구매자인지 구분하기 위한 필드입니다.
                 네이버페이 전용 파라미터이며, 구분이 모호한 경우 고객사 관리자(true)로 입력합니다.
@@ -64,7 +61,7 @@ class ConfirmEscrow(ApiClient):
         )
         query_ = ConfirmEscrowQuery()
         body_ = ConfirmEscrowBody(
-            store_id=store_id,
+            store_id=self.store_id,
             from_store=from_store,
         )
         response_ = self.send(
diff --git a/_sync_api/_confirm_identity_verification.py b/_sync_api/_confirm_identity_verification.py
index ee55e7b..c3ae1d5 100644
--- a/_sync_api/_confirm_identity_verification.py
+++ b/_sync_api/_confirm_identity_verification.py
@@ -34,7 +34,6 @@ class ConfirmIdentityVerification(ApiClient):
     def confirm_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
         otp: Optional[str],
     ) -> ConfirmIdentityVerificationResponse:
         """본인인증 확인
@@ -43,8 +42,6 @@ class ConfirmIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             otp (Optional[str]): OTP (One-Time Password).
                 SMS 방식에서만 사용됩니다.
         
@@ -65,7 +62,7 @@ class ConfirmIdentityVerification(ApiClient):
         )
         query_ = ConfirmIdentityVerificationQuery()
         body_ = ConfirmIdentityVerificationBody(
-            store_id=store_id,
+            store_id=self.store_id,
             otp=otp,
         )
         response_ = self.send(
diff --git a/_sync_api/_delete_billing_key.py b/_sync_api/_delete_billing_key.py
index bdfb5e6..99efe0c 100644
--- a/_sync_api/_delete_billing_key.py
+++ b/_sync_api/_delete_billing_key.py
@@ -40,7 +40,6 @@ class DeleteBillingKey(ApiClient):
     def delete_billing_key(
         self,
         billing_key: str,
-        store_id: Optional[str],
     ) -> DeleteBillingKeyResponse:
         """빌링키 삭제
         
@@ -48,8 +47,6 @@ class DeleteBillingKey(ApiClient):
         
         Args:
             billing_key (str): 삭제할 빌링키.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답
@@ -69,7 +66,7 @@ class DeleteBillingKey(ApiClient):
             billing_key=billing_key,
         )
         query_ = DeleteBillingKeyQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_get_all_payments_by_cursor.py b/_sync_api/_get_all_payments_by_cursor.py
index a3f64f1..777c5bd 100644
--- a/_sync_api/_get_all_payments_by_cursor.py
+++ b/_sync_api/_get_all_payments_by_cursor.py
@@ -28,7 +28,6 @@ class GetAllPaymentsByCursorRequest(ApiRequest[GetAllPaymentsByCursorResponse, G
 class GetAllPaymentsByCursor(ApiClient):
     def get_all_payments_by_cursor(
         self,
-        store_id: Optional[str],
         from_: Optional[str],
         until: Optional[str],
         cursor: Optional[str],
@@ -39,8 +38,6 @@ class GetAllPaymentsByCursor(ApiClient):
         기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             from_ (Optional[str]): 결제 건 생성시점 범위 조건의 시작.
                 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
             until (Optional[str]): 결제 건 생성시점 범위 조건의 끝.
@@ -61,7 +58,7 @@ class GetAllPaymentsByCursor(ApiClient):
         param_ = GetAllPaymentsByCursorParam()
         query_ = GetAllPaymentsByCursorQuery()
         body_ = GetAllPaymentsByCursorBody(
-            store_id=store_id,
+            store_id=self.store_id,
             from_=from_,
             until=until,
             cursor=cursor,
diff --git a/_sync_api/_get_billing_key_info.py b/_sync_api/_get_billing_key_info.py
index 2d2fe9a..506616d 100644
--- a/_sync_api/_get_billing_key_info.py
+++ b/_sync_api/_get_billing_key_info.py
@@ -35,7 +35,6 @@ class GetBillingKeyInfo(ApiClient):
     def get_billing_key_info(
         self,
         billing_key: str,
-        store_id: Optional[str],
     ) -> Optional[BillingKeyInfo]:
         """빌링키 단건 조회
         
@@ -43,8 +42,6 @@ class GetBillingKeyInfo(ApiClient):
         
         Args:
             billing_key (str): 조회할 빌링키.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 빌링키 정보 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetBillingKeyInfo(ApiClient):
             billing_key=billing_key,
         )
         query_ = GetBillingKeyInfoQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_get_cash_receipt_by_payment_id.py b/_sync_api/_get_cash_receipt_by_payment_id.py
index 647c583..08c71b3 100644
--- a/_sync_api/_get_cash_receipt_by_payment_id.py
+++ b/_sync_api/_get_cash_receipt_by_payment_id.py
@@ -35,7 +35,6 @@ class GetCashReceiptByPaymentId(ApiClient):
     def get_cash_receipt_by_payment_id(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> Optional[CashReceipt]:
         """현금 영수증 단건 조회
         
@@ -43,8 +42,6 @@ class GetCashReceiptByPaymentId(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 현금 영수증 객체 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetCashReceiptByPaymentId(ApiClient):
             payment_id=payment_id,
         )
         query_ = GetCashReceiptByPaymentIdQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_get_identity_verification.py b/_sync_api/_get_identity_verification.py
index 0f3dfe0..c2ab767 100644
--- a/_sync_api/_get_identity_verification.py
+++ b/_sync_api/_get_identity_verification.py
@@ -35,7 +35,6 @@ class GetIdentityVerification(ApiClient):
     def get_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
     ) -> Optional[IdentityVerification]:
         """본인인증 단건 조회
         
@@ -43,8 +42,6 @@ class GetIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 조회할 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 본인 인증 객체 또는 `None`을 반환합니다.
@@ -58,7 +55,7 @@ class GetIdentityVerification(ApiClient):
             identity_verification_id=identity_verification_id,
         )
         query_ = GetIdentityVerificationQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_get_payment.py b/_sync_api/_get_payment.py
index 567cc70..b3bd0ca 100644
--- a/_sync_api/_get_payment.py
+++ b/_sync_api/_get_payment.py
@@ -31,7 +31,6 @@ class GetPayment(ApiClient):
     def get_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
     ) -> Optional[Payment]:
         """결제 단건 조회
         
@@ -39,7 +38,6 @@ class GetPayment(ApiClient):
         
         Args:
             payment_id (str): 조회할 결제 아이디.
-            store_id (Optional[str]): 상점 아이디.
         
         Returns:
             성공 응답으로 결제 건 객체 또는 `None`을 반환합니다.
@@ -53,7 +51,7 @@ class GetPayment(ApiClient):
             payment_id=payment_id,
         )
         query_ = GetPaymentQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_get_payment_schedule.py b/_sync_api/_get_payment_schedule.py
index b2fbc54..c4d666a 100644
--- a/_sync_api/_get_payment_schedule.py
+++ b/_sync_api/_get_payment_schedule.py
@@ -22,7 +22,6 @@ class GetPaymentScheduleQuery:
     """상점 아이디
     
     
-    접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
     """
 
 @dataclasses.dataclass
@@ -35,7 +34,6 @@ class GetPaymentSchedule(ApiClient):
     def get_payment_schedule(
         self,
         payment_schedule_id: str,
-        store_id: Optional[str],
     ) -> Optional[PaymentSchedule]:
         """결제 예약 단건 조회
         
@@ -43,8 +41,6 @@ class GetPaymentSchedule(ApiClient):
         
         Args:
             payment_schedule_id (str): 조회할 결제 예약 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Returns:
             성공 응답으로 결제 예약 건 객체 또는 `None`을 반환합니다.
@@ -58,7 +54,7 @@ class GetPaymentSchedule(ApiClient):
             payment_schedule_id=payment_schedule_id,
         )
         query_ = GetPaymentScheduleQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_issue_billing_key.py b/_sync_api/_issue_billing_key.py
index a988ea3..8544960 100644
--- a/_sync_api/_issue_billing_key.py
+++ b/_sync_api/_issue_billing_key.py
@@ -33,7 +33,6 @@ class IssueBillingKeyRequest(ApiRequest[IssueBillingKeyResponse, IssueBillingKey
 class IssueBillingKey(ApiClient):
     def issue_billing_key(
         self,
-        store_id: Optional[str],
         method: InstantBillingKeyPaymentMethodInput,
         channel_key: Optional[str],
         channel_group_id: Optional[str],
@@ -47,8 +46,6 @@ class IssueBillingKey(ApiClient):
         빌링키 발급을 요청합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             method (InstantBillingKeyPaymentMethodInput): 빌링키 결제 수단 정보.
             channel_key (Optional[str]): 채널 키.
                 채널 키 또는 채널 그룹 ID 필수
@@ -76,7 +73,7 @@ class IssueBillingKey(ApiClient):
         param_ = IssueBillingKeyParam()
         query_ = IssueBillingKeyQuery()
         body_ = IssueBillingKeyBody(
-            store_id=store_id,
+            store_id=self.store_id,
             method=method,
             channel_key=channel_key,
             channel_group_id=channel_group_id,
diff --git a/_sync_api/_issue_cash_receipt.py b/_sync_api/_issue_cash_receipt.py
index aa7fe75..50e7aa4 100644
--- a/_sync_api/_issue_cash_receipt.py
+++ b/_sync_api/_issue_cash_receipt.py
@@ -37,7 +37,6 @@ class IssueCashReceiptRequest(ApiRequest[IssueCashReceiptResponse, IssueCashRece
 class IssueCashReceipt(ApiClient):
     def issue_cash_receipt(
         self,
-        store_id: Optional[str],
         payment_id: str,
         channel_key: str,
         type: CashReceiptType,
@@ -53,8 +52,6 @@ class IssueCashReceipt(ApiClient):
         현금 영수증 발급을 요청합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             payment_id (str): 결제 건 아이디.
                 외부 결제 건에 대한 수동 발급의 경우, 아이디를 직접 채번하여 입력합니다.
             channel_key (str): 채널 키.
@@ -80,7 +77,7 @@ class IssueCashReceipt(ApiClient):
         param_ = IssueCashReceiptParam()
         query_ = IssueCashReceiptQuery()
         body_ = IssueCashReceiptBody(
-            store_id=store_id,
+            store_id=self.store_id,
             payment_id=payment_id,
             channel_key=channel_key,
             type=type,
diff --git a/_sync_api/_modify_escrow_logistics.py b/_sync_api/_modify_escrow_logistics.py
index a2bd36d..e6fb315 100644
--- a/_sync_api/_modify_escrow_logistics.py
+++ b/_sync_api/_modify_escrow_logistics.py
@@ -37,7 +37,6 @@ class ModifyEscrowLogistics(ApiClient):
     def modify_escrow_logistics(
         self,
         payment_id: str,
-        store_id: Optional[str],
         sender: Optional[PaymentEscrowSenderInput],
         receiver: Optional[PaymentEscrowReceiverInput],
         logistics: PaymentLogistics,
@@ -50,8 +49,6 @@ class ModifyEscrowLogistics(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             sender (Optional[PaymentEscrowSenderInput]): 에스크로 발송자 정보.
             receiver (Optional[PaymentEscrowReceiverInput]): 에스크로 수취인 정보.
             logistics (PaymentLogistics): 에스크로 물류 정보.
@@ -75,7 +72,7 @@ class ModifyEscrowLogistics(ApiClient):
         )
         query_ = ModifyEscrowLogisticsQuery()
         body_ = ModifyEscrowLogisticsBody(
-            store_id=store_id,
+            store_id=self.store_id,
             sender=sender,
             receiver=receiver,
             logistics=logistics,
diff --git a/_sync_api/_pay_instantly.py b/_sync_api/_pay_instantly.py
index d9a2853..2a041bb 100644
--- a/_sync_api/_pay_instantly.py
+++ b/_sync_api/_pay_instantly.py
@@ -45,7 +45,6 @@ class PayInstantly(ApiClient):
     def pay_instantly(
         self,
         payment_id: str,
-        store_id: Optional[str],
         channel_key: Optional[str],
         channel_group_id: Optional[str],
         method: InstantPaymentMethodInput,
@@ -70,8 +69,6 @@ class PayInstantly(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             channel_key (Optional[str]): 채널 키.
                 채널 키 또는 채널 그룹 ID 필수
             channel_group_id (Optional[str]): 채널 그룹 ID.
@@ -117,7 +114,7 @@ class PayInstantly(ApiClient):
         )
         query_ = PayInstantlyQuery()
         body_ = InstantPaymentInput(
-            store_id=store_id,
+            store_id=self.store_id,
             channel_key=channel_key,
             channel_group_id=channel_group_id,
             method=method,
diff --git a/_sync_api/_pay_with_billing_key.py b/_sync_api/_pay_with_billing_key.py
index ea4d7ec..f7941f5 100644
--- a/_sync_api/_pay_with_billing_key.py
+++ b/_sync_api/_pay_with_billing_key.py
@@ -47,7 +47,6 @@ class PayWithBillingKey(ApiClient):
     def pay_with_billing_key(
         self,
         payment_id: str,
-        store_id: Optional[str],
         billing_key: str,
         channel_key: Optional[str],
         order_name: str,
@@ -74,8 +73,6 @@ class PayWithBillingKey(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             billing_key (str): 빌링키 결제에 사용할 빌링키.
             channel_key (Optional[str]): 채널 키.
                 다수 채널에 대해 발급된 빌링키에 대해, 결제 채널을 특정하고 싶을 때 명시
@@ -122,7 +119,7 @@ class PayWithBillingKey(ApiClient):
         )
         query_ = PayWithBillingKeyQuery()
         body_ = BillingKeyPaymentInput(
-            store_id=store_id,
+            store_id=self.store_id,
             billing_key=billing_key,
             channel_key=channel_key,
             order_name=order_name,
diff --git a/_sync_api/_pre_register_payment.py b/_sync_api/_pre_register_payment.py
index 92a2a69..c0e9687 100644
--- a/_sync_api/_pre_register_payment.py
+++ b/_sync_api/_pre_register_payment.py
@@ -32,7 +32,6 @@ class PreRegisterPayment(ApiClient):
     def pre_register_payment(
         self,
         payment_id: str,
-        store_id: Optional[str],
         total_amount: Optional[int],
         tax_free_amount: Optional[int],
         currency: Optional[Currency],
@@ -43,8 +42,6 @@ class PreRegisterPayment(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             total_amount (Optional[int]): 결제 총 금액.
             tax_free_amount (Optional[int]): 결제 면세 금액.
             currency (Optional[Currency]): 통화 단위.
@@ -60,7 +57,7 @@ class PreRegisterPayment(ApiClient):
         )
         query_ = PreRegisterPaymentQuery()
         body_ = PreRegisterPaymentBody(
-            store_id=store_id,
+            store_id=self.store_id,
             total_amount=total_amount,
             tax_free_amount=tax_free_amount,
             currency=currency,
diff --git a/_sync_api/_register_store_receipt.py b/_sync_api/_register_store_receipt.py
index 57f1947..600be46 100644
--- a/_sync_api/_register_store_receipt.py
+++ b/_sync_api/_register_store_receipt.py
@@ -35,7 +35,6 @@ class RegisterStoreReceipt(ApiClient):
         self,
         payment_id: str,
         items: list[RegisterStoreReceiptBodyItem],
-        store_id: Optional[str],
     ) -> RegisterStoreReceiptResponse:
         """영수증 내 하위 상점 거래 등록
         
@@ -46,7 +45,6 @@ class RegisterStoreReceipt(ApiClient):
         Args:
             payment_id (str): 등록할 하위 상점 결제 건 아이디.
             items (list[RegisterStoreReceiptBodyItem]): 하위 상점 거래 목록.
-            store_id (Optional[str]): 상점 아이디.
         
         Returns:
             성공 응답
@@ -65,7 +63,7 @@ class RegisterStoreReceipt(ApiClient):
         query_ = RegisterStoreReceiptQuery()
         body_ = RegisterStoreReceiptBody(
             items=items,
-            store_id=store_id,
+            store_id=self.store_id,
         )
         response_ = self.send(
             RegisterStoreReceiptRequest(param_, query_, body_),
diff --git a/_sync_api/_resend_identity_verification.py b/_sync_api/_resend_identity_verification.py
index 744eec3..ed7fd77 100644
--- a/_sync_api/_resend_identity_verification.py
+++ b/_sync_api/_resend_identity_verification.py
@@ -38,7 +38,6 @@ class ResendIdentityVerification(ApiClient):
     def resend_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
     ) -> None:
         """SMS 본인인증 요청 재전송
         
@@ -46,8 +45,6 @@ class ResendIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         
         Raises:
             _errors.ForbiddenError: 요청이 거절된 경우
@@ -62,7 +59,7 @@ class ResendIdentityVerification(ApiClient):
             identity_verification_id=identity_verification_id,
         )
         query_ = ResendIdentityVerificationQuery(
-            store_id=store_id,
+            store_id=self.store_id,
         )
         body_ = Empty()
         response_ = self.send(
diff --git a/_sync_api/_resend_webhook.py b/_sync_api/_resend_webhook.py
index 9d9b9be..48fee55 100644
--- a/_sync_api/_resend_webhook.py
+++ b/_sync_api/_resend_webhook.py
@@ -33,7 +33,6 @@ class ResendWebhook(ApiClient):
     def resend_webhook(
         self,
         payment_id: str,
-        store_id: Optional[str],
         webhook_id: Optional[str],
     ) -> PaymentWebhook:
         """웹훅 재발송
@@ -42,8 +41,6 @@ class ResendWebhook(ApiClient):
         
         Args:
             payment_id (str): 결제 건 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             webhook_id (Optional[str]): 웹훅 아이디.
                 입력하지 않으면 결제 건의 가장 최근 웹훅 아이디가 기본 적용됩니다
         
@@ -62,7 +59,7 @@ class ResendWebhook(ApiClient):
         )
         query_ = ResendWebhookQuery()
         body_ = ResendWebhookBody(
-            store_id=store_id,
+            store_id=self.store_id,
             webhook_id=webhook_id,
         )
         response_ = self.send(
diff --git a/_sync_api/_revoke_payment_schedules.py b/_sync_api/_revoke_payment_schedules.py
index ba723f4..9d031af 100644
--- a/_sync_api/_revoke_payment_schedules.py
+++ b/_sync_api/_revoke_payment_schedules.py
@@ -33,7 +33,6 @@ class RevokePaymentSchedulesRequest(ApiRequest[RevokePaymentSchedulesResponse, R
 class RevokePaymentSchedules(ApiClient):
     def revoke_payment_schedules(
         self,
-        store_id: Optional[str],
         billing_key: Optional[str],
         schedule_ids: Optional[list[str]],
     ) -> RevokePaymentSchedulesResponse:
@@ -42,8 +41,6 @@ class RevokePaymentSchedules(ApiClient):
         결제 예약 건을 취소합니다.
         
         Args:
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             billing_key (Optional[str]): 빌링키.
             schedule_ids (Optional[list[str]]): 결제 예약 건 아이디 목록.
         
@@ -63,7 +60,7 @@ class RevokePaymentSchedules(ApiClient):
         param_ = RevokePaymentSchedulesParam()
         query_ = RevokePaymentSchedulesQuery()
         body_ = RevokePaymentSchedulesBody(
-            store_id=store_id,
+            store_id=self.store_id,
             billing_key=billing_key,
             schedule_ids=schedule_ids,
         )
diff --git a/_sync_api/_send_identity_verification.py b/_sync_api/_send_identity_verification.py
index 0f757ad..10b9aa7 100644
--- a/_sync_api/_send_identity_verification.py
+++ b/_sync_api/_send_identity_verification.py
@@ -38,7 +38,6 @@ class SendIdentityVerification(ApiClient):
     def send_identity_verification(
         self,
         identity_verification_id: str,
-        store_id: Optional[str],
         channel_key: str,
         customer: SendIdentityVerificationBodyCustomer,
         custom_data: Optional[str],
@@ -52,8 +51,6 @@ class SendIdentityVerification(ApiClient):
         
         Args:
             identity_verification_id (str): 본인인증 아이디.
-            store_id (Optional[str]): 상점 아이디.
-                접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
             channel_key (str): 채널 키.
             customer (SendIdentityVerificationBodyCustomer): 고객 정보.
             custom_data (Optional[str]): 사용자 지정 데이터.
@@ -76,7 +73,7 @@ class SendIdentityVerification(ApiClient):
         )
         query_ = SendIdentityVerificationQuery()
         body_ = SendIdentityVerificationBody(
-            store_id=store_id,
+            store_id=self.store_id,
             channel_key=channel_key,
             customer=customer,
             custom_data=custom_data,
-- 
2.39.3 (Apple Git-146)

